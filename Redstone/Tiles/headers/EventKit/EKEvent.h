#import "../EventKitUI/EKCalendarDate.h"

@class EKStructuredLocation, NSDate, EKCalendarDate, NSNumber, NSString, NSArray, EKParticipant;

@interface EKEvent : NSObject {
	
	EKStructuredLocation* _cachedLocationPrediction;
	NSDate* _cachedLocationPredictionExpirationDate;
	BOOL _locationPredictionFrozen;
	BOOL _occurrenceIsAllDay;
	BOOL _requiresDetachDueToSnoozedAlarm;
	EKCalendarDate* _occurrenceStartDate;
	EKCalendarDate* _occurrenceEndDate;
	EKCalendarDate* _originalOccurrenceStartDate;
	EKCalendarDate* _originalOccurrenceEndDate;
	NSNumber* _originalOccurrenceIsAllDay;
	NSString* _birthdayPersonUniqueID;
	
}

@property (nonatomic,copy) EKCalendarDate * occurrenceStartDate;                      //@synthesize occurrenceStartDate=_occurrenceStartDate - In the implementation block
@property (nonatomic,copy) EKCalendarDate * occurrenceEndDate;                        //@synthesize occurrenceEndDate=_occurrenceEndDate - In the implementation block
@property (assign,nonatomic) BOOL occurrenceIsAllDay;                                 //@synthesize occurrenceIsAllDay=_occurrenceIsAllDay - In the implementation block
@property (nonatomic,copy) EKCalendarDate * originalOccurrenceStartDate;              //@synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate - In the implementation block
@property (nonatomic,copy) EKCalendarDate * originalOccurrenceEndDate;                //@synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate - In the implementation block
@property (nonatomic,copy) NSNumber * originalOccurrenceIsAllDay;                     //@synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay - In the implementation block
@property (assign,nonatomic) BOOL requiresDetachDueToSnoozedAlarm;                    //@synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm - In the implementation block
@property (retain) NSArray * attachments;
@property (nonatomic,readonly) NSString * eventIdentifier;
@property (assign,getter=isAllDay,nonatomic) BOOL allDay;
@property (nonatomic,copy) NSDate * startDate;
@property (nonatomic,copy) NSDate * endDate;
@property (nonatomic,copy) EKStructuredLocation * structuredLocation;
@property (nonatomic,readonly) EKParticipant * organizer;
@property (assign,nonatomic) long long availability;
@property (nonatomic,readonly) long long status;
@property (nonatomic,readonly) BOOL isDetached;
@property (nonatomic,readonly) NSDate * occurrenceDate;
@property (nonatomic,readonly) NSString * birthdayContactIdentifier;
@property (nonatomic,readonly) long long birthdayPersonID;
@property (nonatomic,readonly) NSString * birthdayPersonUniqueID;                     //@synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID - In the implementation block
+(long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(BOOL)arg3 ;
+(id)eventWithEventStore:(id)arg1 ;
-(long long)daySpan;
-(id)sortedEKAttachmentsDisplayStrings;
-(id)_sortedEKParticipantsForSortingIgnoringNonHumans:(id)arg1 ;
-(id)_commentIconString;
-(id)sortEKParticipantsIgnoringNonHumans:(id)arg1 ;
-(id)_clockIconString;
-(id)sortedEKParticipantsDisplayStringsIgnoringNonHumans:(id)arg1 ;
-(BOOL)hasHumanInviteesToDisplay;
-(id)init;
-(void)dealloc;
-(void)setTitle:(id)arg1 ;
-(BOOL)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(double)duration;
-(id)title;
-(void)reset;
-(void)setTimeZone:(id)arg1 ;
-(BOOL)isEditable;
-(id)uniqueId;
-(void)setLocation:(id)arg1 ;
-(BOOL)refresh;
-(long long)status;
-(void)setTravelTime:(double)arg1 ;
-(double)travelTime;
-(void)setAllDay:(BOOL)arg1 ;
-(id)initWithPersistentObject:(id)arg1 ;
-(unsigned long long)invitationStatus;
-(id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2 ;
-(BOOL)titleChanged;
-(id)_dateForNextOccurrence;
-(void)didCommit;
-(void)rebaseWithOldPCI:(id)arg1 newPCI:(id)arg2 ;
-(BOOL)allowsCalendarModifications;
-(BOOL)allowsAlarmModifications;
-(void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2 ;
-(void)_sendModifiedNote;
-(BOOL)attendeeReplyChanged;
-(id)externalURL;
-(id)participationStatusModifiedDate;
-(long long)pendingParticipationStatus;
-(long long)travelAdvisoryBehavior;
-(void)setLocationPredictionState:(long long)arg1 ;
-(BOOL)needsOccurrenceCacheUpdate;
-(void)setNeedsOccurrenceCacheUpdate:(BOOL)arg1 ;
-(void)setFiredTTL:(BOOL)arg1 ;
-(void)setOccurrenceStartDate:(EKCalendarDate *)arg1 ;
-(void)setOccurrenceEndDate:(EKCalendarDate *)arg1 ;
-(BOOL)_isAllDay;
-(void)setOccurrenceIsAllDay:(BOOL)arg1 ;
-(id)_persistentEvent;
-(EKCalendarDate *)originalOccurrenceStartDate;
-(EKCalendarDate *)occurrenceStartDate;
-(EKCalendarDate *)originalOccurrenceEndDate;
-(void)_clearLocationPredictionCacheIfNotFrozen;
-(long long)birthdayPersonID;
-(void)setOriginalOccurrenceIsAllDay:(NSNumber *)arg1 ;
-(void)_setStartDate:(id)arg1 andClearProposedTimes:(BOOL)arg2 ;
-(void)setOriginalOccurrenceStartDate:(EKCalendarDate *)arg1 ;
-(EKCalendarDate *)occurrenceEndDate;
-(void)setOriginalOccurrenceEndDate:(EKCalendarDate *)arg1 ;
-(id)_effectiveTimeZone;
-(void)_updatePredictedLocationCacheIfNeeded;
-(BOOL)isPredictedLocationFrozen;
-(BOOL)_validateDurationConstrainedToRecurrenceInterval;
-(BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1 ;
-(id)_travelTimeInternalDescription;
-(void)setRequiresDetachDueToSnoozedAlarm:(BOOL)arg1 ;
-(BOOL)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id*)arg2 ;
-(BOOL)requiresDetachDueToSnoozedAlarm;
-(BOOL)_isInitialOccurrenceDate:(id)arg1 ;
-(void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(BOOL)arg3 ;
-(BOOL)_isSimpleRepeatingEvent;
-(BOOL)conformsToRecurrenceRules:(id)arg1 ;
-(BOOL)occurrenceIsAllDay;
-(NSNumber *)originalOccurrenceIsAllDay;
-(BOOL)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2 ;
-(void)_deleteThisOccurrence;
-(void)_cancelDetachedEventsWithSpan:(long long)arg1 ;
-(BOOL)_eventIsTheOnlyRemainingOccurrence;
-(BOOL)_noRemainingEarlierOccurrences;
-(BOOL)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1 ;
-(BOOL)_cancelWithSpan:(long long)arg1 error:(id*)arg2 ;
-(BOOL)_shouldDeclineInsteadOfDelete;
-(BOOL)_deleteWithSpan:(long long)arg1 error:(id*)arg2 ;
-(id)_suggestedEventInfoRelation;
-(BOOL)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3 ;
-(void)clearInvitationStatus;
-(BOOL)hasPredictedLocation;
-(BOOL)hasSelfAttendee;
-(BOOL)validateWithSpan:(long long)arg1 error:(id*)arg2 ;
-(BOOL)commitWithSpan:(long long)arg1 error:(id*)arg2 ;
-(id)dirtyPropertiesToSkip;
-(BOOL)removeWithSpan:(long long)arg1 error:(id*)arg2 ;
-(id)scanForConflicts;
-(NSString *)birthdayPersonUniqueID;
-(void)rollback;
-(void)revert;
-(id)proposedStartDate;
-(BOOL)isAllDay;
-(NSDate *)occurrenceDate;
-(id)suggestionInfo;
-(id)startDateIncludingTravel;
-(NSString *)eventIdentifier;
-(id)eventStore;
-(long long)participationStatus;
-(id)recurrenceRule;
-(id)startDateForRecurrence;
-(void)setRecurrenceRule:(id)arg1 ;
-(BOOL)isStartDateDirty;
-(BOOL)isEndDateDirty;
-(void)setProposedStartDate:(id)arg1 ;
-(BOOL)serverSupportedProposeNewTime;
-(void)setInvitationStatus:(unsigned long long)arg1 ;
-(void)setParticipationStatus:(long long)arg1 ;
-(id)responseComment;
-(void)setResponseComment:(id)arg1 ;
-(BOOL)timeChanged;
-(BOOL)dateChanged;
-(BOOL)locationChanged;
-(BOOL)allowsAttendeesModifications;
-(id)externalURI;
-(EKStructuredLocation *)structuredLocation;
-(long long)travelRoutingMode;
-(BOOL)allowsProposedTimeModifications;
-(id)initWithEventStore:(id)arg1 ;
-(void)overrideStartDate:(id)arg1 ;
-(long long)compareStartDateWithEvent:(id)arg1 ;
-(id)startCalendarDateIncludingTravelTime;
-(id)startCalendarDate;
-(id)locationWithoutPrediction;
-(BOOL)canBeRespondedTo;
-(id)endCalendarDate;
-(id)structuredLocationWithoutPrediction;
-(BOOL)allowsPrivacyLevelModifications;
-(long long)privacyLevel;
-(void)setPrivacyLevel:(long long)arg1 ;
-(id)privacyLevelString;
-(void)setStructuredLocation:(EKStructuredLocation *)arg1 ;
-(void)setTravelAdvisoryBehavior:(long long)arg1 ;
-(BOOL)eligibleForTravelAdvisories;
-(BOOL)travelAdvisoryBehaviorIsEffectivelyEnabled;
-(double)durationIncludingTravel;
-(BOOL)allowsAvailabilityModifications;
-(id)initialStartDate;
-(id)initialEndDate;
-(id)actualProposedStartDate;
-(BOOL)hasAttendeeProposedTimes;
-(BOOL)isTentative;
-(void)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id*)arg3 ;
-(BOOL)locationIsAConferenceRoom;
-(BOOL)automaticLocationGeocodingAllowed;
-(id)preferredLocationWithoutPrediction;
-(void)confirmPredictedLocation:(id)arg1 ;
-(void)rejectPredictedLocation;
-(id)committedValueForKey:(id)arg1 ;
-(void)setPredictedLocationFrozen:(BOOL)arg1 ;
-(BOOL)changingAllDayPropertyIsAllowed;
-(BOOL)canDetachSingleOccurrence;
-(BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3 ;
-(BOOL)allowsTravelTimeModifications;
-(BOOL)requiresDetach;
-(BOOL)allowsSpansOtherThanThisEvent;
-(BOOL)responseMustApplyToAll;
-(long long)_parentParticipationStatus;
-(BOOL)isStatusDirty;
-(NSString *)birthdayContactIdentifier;
-(BOOL)allowsRecurrenceModifications;
-(BOOL)validateRecurrenceRule:(id)arg1 error:(id*)arg2 ;
-(BOOL)isAllDayDirty;
-(long long)availability;
-(void)setAvailability:(long long)arg1 ;
-(void)setEndDate:(NSDate *)arg1 ;
-(void)setStartDate:(NSDate *)arg1 ;
-(NSDate *)startDate;
-(NSDate *)endDate;
-(BOOL)isDetached;
-(BOOL)canForward;
-(BOOL)updateEventToEvent:(id)arg1 ;
-(void)setSuggestionInfo:(id)arg1 ;
-(long long)locationPredictionState;
-(BOOL)firedTTL;
@end
